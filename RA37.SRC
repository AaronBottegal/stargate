	TTL	<<<<<  S T A R G A T E  >>>>> 
*
* PRAYAH 1: P L O G L A M S T A H T
*
	ORG	$0000
*
*OFF OBJECT
*X=OBJECT
*
OFSHIT	PSHS	X,U,D,Y
	LDD	OBJX,X
	LDY	OPICT,X
	JSR	[OBJDEL,Y]
	PULS	X,U,D,Y,PC
*
*EXECUTIVE LOOP
*
EXEC	LDX	#ACTIVE
	STX	CRPROC
EXEC0	LDA	TIMER
	BEQ	EXEC0
	CLR	TIMER
	LDB	STATUS
	BITB	#$69
	BEQ	EXEC00
	CLR	OVCNT
	BRA	EXEC1
EXEC00	ASLA
	ADDA	OVCNT
	SUBA	#4
	BPL	EXEC01
	CLRA
EXEC01	STA	OVCNT
	CMPA	#2
	BLO	EXEC1
	LDB	#3
	STB	STRCNT	CUT DOWN STARS
	CMPA	#2	OVERLOAD MAX
	BLS	EXEC1
	LDA	#2
	STA	OVCNT
*OVERLOAD WIPE OUT A GUY
	LDY	#OPTR
EXEC02	LDX	,Y
	BEQ	EXEC1
	LDA	OTYP,X	DONT TOUCH THIS GUY
	BEQ	EXEC03
	LEAY	,X
	BRA	EXEC02
EXEC03	LDU	,X
	STU	Y
	LDD	SEED
	ANDA	#$3F
	ADDA	#$60
	ADDD	OX16,X
	STD	OX16,X	HYPER HIM OUT OF THERE
	BSR	OFSHIT
	LDD	#0
	STD	OBJX,X
	LDU	IPTR
	STX	IPTR
	STU	,X	INTO INACTIVE LIST
EXEC1	BSR	COLCHK
	JSR	XUVCT
	JSR	RAND
	JSR	MESUPV
	LDA	PIA31	CHECK INVISO BUTTON
	BITA	#$2	WELL?
	JMP	SWPACH	*******************************************************
	NOP
	NOP
**************************************************************************
* BEQ SWP$ NOT THIS TIME *
* JSR INVSTV NA NA NA NA...NA NA NA NA...HEY HEYYYYY...GO-OOD BYE *
*SWP$ LDA INDIAG DIAGNOSTICS *
* BNE SWPX THEN NO PROCESSING *
**************************************REMOVE PATCH AND INSERT ABOVE CODE**
*
*SWITCH PROCESSING
*
SWP	LDX	SWPROC
	BNE	SWP1
	LDX	SWPROC+4
	BEQ	SWPX
	LDD	SWPROC+6
	CLR	SWPROC+4
	CLR	SWPROC+5
	BRA	SWP3
SWP1	LDD	SWPROC+2
	CLR	SWPROC
	CLR	SWPROC+1
SWP3	ANDB	STATUS
	BNE	SWP
	JSR	MKPROC
	BRA	SWP
SWPX	EQU	*
*
*PROCESS DISPATCH
*
DISP	LDU	#ACTIVE
	BRA	DISP2
DISP1	DEC	PTIME,U
	BNE	DISP2
	STU	CRPROC
	JMP	[PADDR,U]
*
*SLEEP
*A=SLEEP TIME X 16MSEC
*X=WAKEUP ADDR
*
SLEEP	LDU	CRPROC
	STA	PTIME,U
	STX	PADDR,U
DISP2	LDU	,U
	BNE	DISP1
	LDS	#HSTK
	JMP	EXEC
*
COLCHK	LDA	STATUS
	BITA	#$09
	BNE	COLCX
	LDD	PLAXC	PLAYER
	LDU	#PLAPIC
	TST	PLADIR
	BPL	COLC1
	LDU	#PLBPIC
COLC1	PSHS	D,U
	INC	PCFLG
	JSR	COLIDE
	PULS	D,U
	BNE	COLC2
	LDX	#SPTR
	JSR	COL0
	BEQ	COLCX
COLC2	JSR	PLENDV
COLCX	CLR	PCFLG
	RTS
*
*SUICIDE
*
SUCIDE	LDX	CRPROC
	BSR	KILL
	LEAU	,X
	BRA	DISP2	GET NEW CRPROC
*
*KILL OBJECT PROCESS
*
KILLOP	LDX	OBJID,X
*
*KILL
*X=PROCESS TO KILL
*
KILL	PSHS	D,U
	LDU	#ACTIVE
KILP1	CMPX	,U
	BNE	KILPLP	NO MATCH
	LDD	,X	GET FORWARD LINK OF DEAD GUY
	STD	,U
	LDA	PCOD,X
	BEQ	KILP2	REG PROCESS
	LDD	SPFREE	SUPER PROCESS
	STX	SPFREE
	BRA	KILP3
KILP2	LDD	FREE
	STX	FREE	PUT HIM AT HEAD OF FREE
KILP3	STD	,X
	LEAX	,U	SAVE CRPROC FOR SUICIDE
	PULS	D,U,PC
KILPLP	LDU	,U
	BNE	KILP1
	BSR	ERROR
ERROR	ORCC	#$10	(SEI) ERROR TRAP
	BRA	*
*
*MAKE A SUPER PROCESS
*X = START ADDR
*A = USER TYPE
*X =RETURNED WITH DATA BLOCK POINTER
MSPROC	PSHS	A,Y,U
	LDU	SPFREE
	BNE	*+3
	JSR	ERROR	ERROR TRAP
	LDY	,U
	STY	SPFREE
	LDA	#1
	STA	PCOD,U
	LDA	,S	GET TYPE
	BRA	MKP1
*
*MAKE A PROCESS
*X=START ADDR
*A=USER TYPE
*X RETURNED WITH DATA BLOCK PTR
*
MKPROC	PSHS	A,Y,U
	LDU	FREE
	BNE	MKP0	NOT OUT
	JSR	ERROR
MKP0	LDY	,U
	STY	FREE	DELINK
	CLR	PCOD,U
MKP1	STX	PADDR,U
	STA	PTYPE,U
	LDA	#1
	STA	PTIME,U	INIT TIME
	LDX	[CRPROC]
	STU	[CRPROC]
	STX	,U	LINK IN
	LEAX	,U	SETUP X AS DATA BLOCK
	PULS	A,Y,U,PC
*
*GENOCIDE : KILL EVERYONE EXCEPT FOR YOURSELF
*
GNCIDE	PSHS	A,X
	LDX	#ACTIVE
GNC1	LDX	,X
	BEQ	GNCX
	CMPX	CRPROC
	BEQ	GNC1	DO NOT KILL SELF
	LDA	PTYPE,X	DONT KILL COINS
	CMPA	#CTYPE
	BEQ	GNC1
	BSR	KILL
	BRA	GNC1
GNCX	PULS	A,X,PC
*
*INIT OBJECT
*BSR GETOB
*[RET]>OPICT
*[RET+]>OCVECT
*[RET+2]>OBJCOL
*U>OBJID
*RET<RET+6
*
OBINIT	BSR	GETOB
	PSHS	U,D,Y
	STU	OBJID,X
	LDU	6,S
	PULU	D,Y
	STD	OPICT,X
	STY	OCVECT,X
	PULU	D
	STD	OBJCOL,X
	STU	6,S
	PULS	U,D,Y,PC
*
*GET OBJECT LIST CELL IN X
*OBJX=0
*CALLER MUST >STX OPTR< AFTER INITIALIZATION OF PARAMETERS
GETOB	PSHS	U,D
	LDX	OFREE
	BNE	GETOB1	NOT OUT
	JSR	ERROR
GETOB1	LDD	OLINK,X
	STD	OFREE
	LDD	OPTR
	STD	OLINK,X
	CLRD
	STD	OBJX,X
	STA	OTYP,X	CLEAR TYPE
	PULS	U,D,PC
*
*KILL OBJECT CELL IN X
*
KILLOB	PSHS	X,Y,U
	LDU	#OPTR
KILO1	CMPX	,U	MATCH?
	BNE	KILOLP
KILO2	LDY	[,U]	UNLINK
	STY	,U
	LDY	OFREE
	STX	OFREE
	STY	,X
	PULS	X,Y,U,PC
KILOLP	LDU	,U
	BNE	KILO1	CONTINUE
	LDU	#IPTR	SEARCH INACTIVE LIST
KILO3	CMPX	,U
	BEQ	KILO2
	LDU	,U
	BNE	KILO3
	JSR	ERROR
*
*KILL A SHELL
*X=SHELL
*
KILSHL	PSHS	X,Y,U
	LDU	#SPTR
	BRA	KILO3
*
*OUTPUT 2X8
*
ON28	PSHS	X,DP
	STS	TEMP48
	BCC	ON280
	LEAY	2,Y
ON280	LDS	OBJP0,Y
	ADDB	#8
	TFR	D,U
	BRA	ON281
*
*OFF2X8
*
OFF28	PSHS	X,DP
	ADDB	#8
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	TFR	A,DP
	ANDCC	#0
	BRA	OFF281
*
*OFF 5X8
*
OFF58	PSHS	X,DP
	ADDB	#8
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	TFR	A,DP
	ANDCC	#0
	PSHU	X,Y,D,DP,CC
	LEAU	264,U
	BRA	OFF481
*
*OUTPUT 4X8
*STORED COL1-COLN
*CALLED BY IRQ ONLY
ON48	PSHS	X,DP
	STS	TEMP48	SAVE STACK
	BCC	ON480
	LEAY	2,Y	ODD PHASE
ON480	LDS	OBJP0,Y
	ADDB	#8
	TFR	D,U
ON481	PULS	D,X,Y,DP,CC
	PSHU	D,X,Y,DP,CC
	LEAU	264,U
	PULS	D,X,Y,DP,CC
	PSHU	D,X,Y,DP,CC
	LEAU	264,U
ON281	PULS	D,X,Y,DP,CC
	PSHU	D,X,Y,DP,CC
	LEAU	264,U
	PULS	D,X,Y,DP,CC
	PSHU	D,X,Y,DP,CC
	LDS	>TEMP48	STACK RESTORE, EXTENDED
	PULS	X,DP,PC
*
*ERASE 4X8
*COLUMNAR OBJECTS 8 LONG
*
*OFF 4X8
*
OFF48	PSHS	X,DP
	ADDB	#8
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	TFR	A,DP
	ANDCC	#0
OFF481	PSHU	X,Y,D,DP,CC
	LEAU	264,U
	PSHU	X,Y,D,DP,CC
	LEAU	264,U
OFF281	PSHU	X,Y,D,DP,CC
	LEAU	264,U
	PSHU	X,Y,D,DP,CC
	PULS	X,DP,PC
*
*ON 5X8
*
ON58	PSHS	X,DP
	STS	TEMP48
	BCC	ON580
	LEAY	2,Y
ON580	LDS	OBJP0,Y
	ADDB	#8
	TFR	D,U
	PULS	D,X,Y,DP,CC
	PSHU	D,X,Y,DP,CC
	LEAU	264,U
	BRA	ON481
*
*ON 3X4 OBJECT
*
ON34	BCC	ON340
	LEAY	2,Y	ODD	GUY
ON340	LDY	OBJP0,Y
	TFR	D,U
ON341	LDD	,Y
	STD	,U
	LDD	2,Y
	STD	2,U
	LDD	4,Y
	STD	$100,U
	LDD	6,Y
	STD	$102,U
	LDD	8,Y
	STD	$200,U
	LDD	10,Y
	STD	$202,U
	RTS
*
*OFF 3X4 OBJECT
*
OFF34	TFR	D,U
	LDD	#0
OFF341	STD	,U
	STD	2,U
	STD	$100,U
	STD	$102,U
	STD	$200,U
	STD	$202,U
	RTS
*
*ON 2X3 OBJECT
*
ON23	BCC	ON230
	LEAY	2,Y
ON230	LDY	OBJP0,Y
	TFR	D,U
	LDD	,Y
	STD	,U
	LDD	2,Y
	STA	2,U
	STB	$100,U
	LDD	4,Y
	STD	$101,U
	RTS
*
*OFF 2X3 OBJECT
*
OFF23	TFR	D,U
	LDD	#0
	STD	,U
	STA	2,U
	STD	$100,U
	STA	$102,U
	RTS
*
*OUTPUT 6X4
*IRQ CALLS ONLY
*
ON64	PSHS	X,U,D
	STS	TEMP48
	BCC	ON640
	LEAY	2,Y
ON640	LDS	OBJP0,Y
	ADDB	#4
	TFR	D,U
ON641	PULS	X,D
	PSHU	X,D
	LEAU	260,U
	PULS	X,D
	PSHU	X,D
	LEAU	260,U
	PULS	X,D
	PSHU	X,D
	LEAU	260,U
	PULS	X,D
	PSHU	X,D
	LEAU	260,U
	PULS	X,D
	PSHU	X,D
	LEAU	260,U
	PULS	X,D
	PSHU	X,D
	LDS	TEMP48
	PULS	X,U,D,PC
*
*OFF 6X4
*
OFF64	PSHS	X,U,D
	ADDB	#4
	TFR	D,U
	LDD	#0
OFF641	LDX	#0
	PSHU	X,D
	LEAU	260,U
	PSHU	X,D
	LEAU	260,U
	PSHU	X,D
	LEAU	260,U
	PSHU	X,D
	LEAU	260,U
	PSHU	X,D
	LEAU	260,U
	PSHU	X,D
	PULS	X,U,D,PC
*
*OUTPUT 8X6
*
ON86	PSHS	X
	STS	TEMP48
	BCC	ON860
	LEAY	2,Y
ON860	LDS	OBJP0,Y
	ADDB	#6
	TFR	D,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
ON661	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
ON561	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LEAU	262,U
	PULS	X,D,Y
	PSHU	X,D,Y
	LDS	TEMP48
	PULS	X,PC
*
*OFF 8X6
*
OFF86	PSHS	X
	ADDB	#6
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	PSHU	X,D,Y
	LEAU	262,U
	PSHU	X,D,Y
	LEAU	262,U
OFF661	PSHU	X,D,Y
	LEAU	262,U
OFF561	PSHU	X,D,Y
	LEAU	262,U
	PSHU	X,D,Y
	LEAU	262,U
	PSHU	X,D,Y
	LEAU	262,U
	PSHU	X,D,Y
	LEAU	262,U
	PSHU	X,D,Y
	PULS	X,PC
*
*OUTPUT 5X6
*
ON56	PSHS	X
	STS	TEMP48
	BCC	ON560
	LEAY	2,Y
ON560	LDS	OBJP0,Y
	ADDB	#6
	TFR	D,U
	BRA	ON561
*
*OFF 5X6
*
OFF56	PSHS	X
	ADDB	#6
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	BRA	OFF561
*
*OUTPUT 6X6
*
ON66	PSHS	X
	STS	TEMP48
	BCC	ON660
	LEAY	2,Y
ON660	LDS	OBJP0,Y
	ADDB	#6
	TFR	D,U
	JMP	ON661
*
*OFF 6X6
*
OFF66	PSHS	X
	ADDB	#6
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	BRA	OFF661
*
*ON 4X7
*
ON47	PSHS	X
	STS	TEMP48
	BCC	ON471
	LEAY	2,Y
ON471	LDS	OBJP0,Y
	ADDB	#7
	TFR	D,U
	BRA	ON470
*OFF 4X7
OFF47	PSHS	X
	ADDB	#7
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	ANDCC	#0
	BRA	OFF470
*
* ON 5X7 OBJECT
*
ON57	PSHS	X
	STS	TEMP48
	BCC	ON570
	LEAY	2,Y
ON570	LDS	OBJP0,Y
	ADDB	#7
	TFR	D,U
	PULS	D,X,Y,CC
	PSHU	D,X,Y,CC
	LEAU	263,U
ON470	PULS	D,X,Y,CC
	PSHU	D,X,Y,CC
	LEAU	263,U
	PULS	D,X,Y,CC
	PSHU	D,X,Y,CC
	LEAU	263,U
	PULS	D,X,Y,CC
	PSHU	D,X,Y,CC
	LEAU	263,U
	PULS	D,X,Y,CC
	PSHU	D,X,Y,CC
	LDS	TEMP48
	PULS	X,PC
*
*OFF 5 X 7
*
OFF57	PSHS	X
	ADDB	#7
	TFR	D,U
	LDD	#0
	LDX	#0
	LEAY	,X
	ANDCC	#0
	PSHU	D,X,Y,CC
	LEAU	263,U
OFF470	PSHU	D,X,Y,CC
	LEAU	263,U
	PSHU	D,X,Y,CC
	LEAU	263,U
	PSHU	D,X,Y,CC
	LEAU	263,U
	PSHU	D,X,Y,CC
	PULS	X,PC

ON59	PSHS	X,DP
	STS	TEMP48
	BCC	ON591
	LEAY	2,Y
ON591	LDS	OBJP0,Y
	ADDB	#9	MOVE TO END OF COLUMN
	TFR	D,U
	LDA	,S+	GET A BYTE
	STA	-9,U
	PULS	Y,X,D,DP,CC
	PSHU	Y,X,D,DP,CC
	LEAU	264,U
	LDA	,S+	GET A BYTE
	STA	-9,U
	PULS	Y,X,D,DP,CC
	PSHU	Y,X,D,DP,CC
	LEAU	264,U
	LDA	,S+	GET A BYTE
	STA	-9,U
	PULS	Y,X,D,DP,CC
	PSHU	Y,X,D,DP,CC
	LEAU	264,U
	LDA	,S+	GET A BYTE
	STA	-9,U
	PULS	Y,X,D,DP,CC
	PSHU	Y,X,D,DP,CC
	LEAU	264,U
	LDA	,S+	GET A BYTE
	STA	-9,U
	PULS	Y,X,D,DP,CC
	PSHU	Y,X,D,DP,CC
	LDS	>TEMP48	RESTORE POINTER
	PULS	X,PC,DP

OFF59	PSHS	X
	ADDB	#9
	TFR	D,U
	LDX	#0
	LEAY	,X
	CLRA
	PSHU	X,Y,A
	PSHU	X,Y
	LEAU	265,U
	PSHU	X,Y,A
	PSHU	X,Y
	LEAU	265,U
	PSHU	X,Y,A
	PSHU	X,Y
	LEAU	265,U
	PSHU	X,Y,A
	PSHU	X,Y
	LEAU	265,U
	PSHU	X,Y,A
	PSHU	X,Y
	PULS	X,PC

FBALON	PSHS	X
	STS	TEMP48
	BCS	FBAL1
	LDS	OBJP0,Y	GET FIRST GUY
	ADDB	#5
	TFR	D,U	NOW, ONLY DO 3 COLUMNS
	BRA	FBAL2
FBAL1	LDS	OBJP0+2,Y GET ODD FLAVOR OUTRIGHT
	ADDB	#5
	TFR	D,U
	PULS	X,Y,A
	PSHU	X,Y,A
	LEAU	261,U
FBAL2	PULS	X,Y,A
	PSHU	X,Y,A
	LEAU	261,U
	PULS	X,Y,A
	PSHU	X,Y,A
	LEAU	261,U
	PULS	X,Y,A
	PSHU	X,Y,A
	LDS	TEMP48
	PULS	X,PC
*
* ACRED: ADDS A CREDITS TO TOTAL CREDITS; 99 MAX
*
ACRED	PSHS	A,X	SAVE
	ADDA	CREDIT	GET PRESENT
	DAA		HUMANIZE
	BCC	ACRD0	NO OVERFLOW
	LDA	#$99	YES, STAY AT 99
ACRD0	STA	CREDIT	SAVE NEW COUNT
	LDX	#CREDST	BACKUP CREDITS
	JSR	WCMOSA
	PULS	X,A,PC	GO BACK CLEAN
*
* COIN SLOT ROUTINES
*
COINR	PSHS	D,X	SAVE STATE
	LDB	#$03	3RD TOTALS(RIGHT COIN)
	BRA	COIN$	HANDLE BELOW
COINC	PSHS	D,X	SAVE STATE
	LDB	#$02	2ND TOTALS(CENTER COIN)
	BRA	COIN$	HANDLE BELOW
COINL	PSHS	D,X	SAVE STATE
	LDB	#$01	1ST TOTALS(LEFT COIN)
COIN$	JSR	AUD1	BUMP COUNT BY 1
	ASLB	DOUBLE	FOR CMOS
	LDX	#SLOT1M-2 POINT TO START-2
	ABX		REMOVE OFFSET
	JSR	RCMOSB	GET CORRECT SLOT X
	BSR	BCDBIN	CONVERT TO BINARY
	LDA	BUNITS	GET PRESENT BONUS UNITS
	PSHS	B	AND ADD PRESENT COUNT TO IT
	ADDA	,S
	STA	BUNITS	UPDATE
	LDA	CUNITS
	ADDA	,S+	GET PRESENT
	STA	CUNITS	UPDATE
	LDX	#MINUNT	GET MINIMUM UNITS
	JSR	RCMOSB	FROM CMOS
	BSR	BCDBIN	WORK IN BINARY
	PSHS	B	FOR CBA
	CMPA	,S+	ENOUGH?
	BCC	COIN1	YES, GIVE IT
	PULS	D,X,PC	NOT ENOUGH SO FAR, BYE
COIN1	LDX	#CUNITC	HOW MANY?
	JSR	RCMOSB	GET IT
	BSR	BCDBIN	CONVERT TO HEX
	BSR	DIVAB	SAVE REMAINDER IN B
	PSHS	A	SAVE COUNT TO BE AWARDED FOR A WHILE
	STB	CUNITS	SAVE REMAINDER
	LDX	#CUNITB	BONUS REQUIRES HOW MANY?
	JSR	RCMOSB	IN B
	LDA	BUNITS	GET BONUS SO FAR
	BSR	BCDBIN	CONVERT TO BINARY
	BSR	DIVAB	DIVIDE
	TSTA		ANY YET?
	BEQ	COIN2	NO
	CLR	CUNITS	YES, RESET ANY EXTRA
	CLR	BUNITS
COIN2	ADDA	,S+	GET OTHER CREDITS EARNED
	DAA		HUMANIZE
	LDB	#$04	BUMP TOTPDC
	JSR	AUD	BY THE COUNT PAID FOR
	JSR	ACRED	ADD TO CREDITS COUNTER
	PULS	D,X,PC	CLEAN + GO
*
* DIVAB: A/B, REMAINDER IN B
*
DIVAB	PSHS	B	SAVE
	TSTB		ANY?
	BNE	DIVAB0	YES, HANDLE
	CLRA		NO, SET TO 0
	PULS	B,PC	CLEAN RETURN
DIVAB0	EXG	A,B	FOR DAA
	LDA	#$99	START-1
DIVAB1	ADDA	#$01	NEXT
	DAA		HUMANIZE
	SUBB	,S	TAKE AWAY N
	BCC	DIVAB1	LOOP TILL OVERFLOW
	ADDB	,S+	ADD REMAINDER + FIX STACK
	RTS		BTE
*
* BCDBIN: BCD=B, BINARY=B
*
BCDBIN	PSHS	A	SAVE STATE
	EXG	A,B	MOVE B TO A FOR DAA
	CLRB	SET	COUNT TO ZERO
BCDBN1	TSTA	DONE?
	BNE	BCDBN2	NO
	PULS	A,PC	CLEAN UP + GO
BCDBN2	ADDA	#$99	SUBTRACT 1
	DAA		HUMANIZE
	INCB		BUMP COUNTER
	BRA	BCDBN1	LOOP TILL A=0
*
*COIN SWITCHES
*LEFT
LCOIN	LDX	#LCCNT
	LDY	#COINL
	BRA	COIN
*RIGHT
RCOIN	LDX	#RCCNT
	LDY	#COINR
	BRA	COIN
*CENTER
CCOIN	LDX	#CCCNT
	LDY	#COINC
*
*COIN ROUTINE
*X=DEBOUNCE COUNTER
*B=ROUTINE
COIN	LDA	SLMCNT
	BNE	SLAMX
	LDA	,X
	BNE	SLAMX
	LDA	#$16	DEBOUNCE TIME
	STA	,X
	STY	PD2,U	SAVE JUMP
	NAP	10,CN1
CN1	LDA	SLMCNT
	BNE	SLAMX	SLAM, DITCH
	LDD	#CNSND
	JSR	SNDLD
	JSR	[PD2,U]
SLAMX	JMP	SUCIDE
*
*SOUND TABLE
*SNDPRI,N*(REPCNT,SNDTMR,SND#) N>=1
*SNDTMR IN 16 MSEC
*SNDPRI : HI=HI,INTERRUPTABLE BY EQUALS
*END: REPCNT=0
*
CNSND	FCB	$FF,$01,$18,$19,0 COIN SOUND
RPSND	FCB	$EF,$01,$20,$1E,0 FREE SHIP
PDSND	FCB	$EE,$02,$08,$11,$01,$20,$17,0 PLAYER DEATH
ST1SND	FCB	$F0,$01,$40,$0A,0 START 1
ST2SND	FCB	$F0,$01,$10,$0B,0 START2
TBSND	FCB	$E8,$01,$04,$14,$02,$06,$11
	FCB	$02,$0A,$17,0 TERRAIN BLOW
SBSND	FCB	$E8,$06,$04,$11,$01,$10,$17,00 SMART BOMB
ACSND	FCB	$E0,$03,$0A,$08,0 ASTRO CATCH
ALSND	FCB	$E0,$01,$18,$1F,0 ASTRO LAND
AHSND	FCB	$E0,$01,$18,$11,0 ASTRO HIT
ASCSND	FCB	$D8,$01,$10,$1A,0 ASTRO SCREAM
APSND	FCB	$D0,$01,$30,$15,0 APPEAR SOUND
PRHSND	FCB	$D0,$01,$10,$05,0 PROBE HIT
SCHSND	FCB	$D0,$01,$08,$17,0 SCHITZ HIT
UFHSND	FCB	$D0,$01,$08,$07,0 UFO HIT
TIHSND	FCB	$D0,$01,$0A,$01,0 TIE HIT
LHSND	FCB	$D0,$01,$0A,$06,0 LANDER HIT
LPKSND	FCB	$E1,$01,$10,$0B,0 LANDER PICK UP
LSKSND	FCB	$C8,$0A,$01,$0E,0 LANDER SUCK
SWHSND	FCB	$C0,$01,$08,$07,0 SWARM HIT
LASSND	FCB	$C0,$01,$30,$14,0 LASER
LGSND	FCB	$C0,$01,$20,$18,0 LANDER GRAB
LSHSND	FCB	$C0,$01,$08,$03,0 LANDER SHOOT
SSHSND	FCB	$C0,$01,$30,$09,0 SCHITZO SHOOT
USHSND	FCB	$C0,$01,$08,$03,0 UFO SHOOT
SWSSND	FCB	$C0,$01,$18,$0C,0 SWARM SHOOT
*
*SOUND OUTPUT
*B=SND TO MAKE
*
SNDOUT	PSHS	A,B,CC
	ORCC	#$FF
	LDA	#$3F
	STA	SOUND
	COMB
	ANDB	#$3F	DONT TURN ON LEDS
	STB	SOUND
	PULS	A,B,CC,PC
*
*SOUND LOADER
*D=ADDR OF SOUND
*
*SNDLD PSHS X,D,CC
* CLR THFLG RESET THRUST
SNDLD	JMP	SNDPCH	*****************ATTR SOUND PATCH
	NOP		*****************WASTE A BYTE
	TFR	D,X
	LDA	,X
	CMPA	SNDPRI
	BLO	SNDLDX	PRIORITY NOT HI ENOUGH
	STA	SNDPRI
	LEAX	-2,X
	ORCC	#$10	(SEI)
	STX	SNDX
	LDD	#$0101
	STD	SNDTMR	INIT TIMER,REPCNT
SNDLDX	PULS	X,D,CC,PC
*
*SOUND SEQUENCER
*
SNDSEQ	LDA	SNDTMR
	BEQ	SNDS00
	DEC	SNDTMR
	BNE	SNDSX
	LDX	SNDX
	DEC	SNDREP
	BNE	SNDS1
	LEAX	3,X	GET NEXT
	STX	SNDX
	LDA	,X
	BNE	SNDS0	SOUND OVER?
	STA	SNDPRI	YIP
SNDS00	LDA	PIA21	THRUST ON?
	BITA	#2
	BNE	SNDS01	YES
	LDA	THFLG	NO,ACTIVE?
	BEQ	SNDSX	NO
	CLR	THFLG	YES,TURN IT OFF
	LDB	#$0F
	BRA	SNDSX1
SNDS01	LDA	THFLG	THRUST ALREADY ON?
	BNE	SNDSX	YIP...
	LDA	STATUS
	BITA	#$98	PLAYER ALIVE?
	BNE	SNDSX	NO
	LDB	#$16	NO HIT IT
	STB	THFLG
	BRA	SNDSX1
SNDS0	STA	SNDREP
SNDS1	LDD	1,X
	STA	SNDTMR
SNDSX1	BSR	SNDOUT
SNDSX	EQU	*
*
*SWITCH SCAN
*TRIGGER=LAST 2 ZERO, NOW 1 GAME SWITCH
*TRIGGER=LAST 1 ZERO, NOW 2 1 COINS
SSCAN	LDA	PIA0
	BITA	#$40
	BEQ	SSC00
	LDA	#60
	STA	SLMCNT
*COIN + SLAM DEBOUNCERS
SSC00	LDA	SLMCNT
	BEQ	SSC0A
	DEC	SLMCNT
SSC0A	LDA	LCCNT
	BEQ	SSC0B
	DEC	LCCNT
SSC0B	LDA	CCCNT
	BEQ	SSC0C
	DEC	CCCNT
SSC0C	LDA	RCCNT
	BEQ	SSC0
	DEC	RCCNT
SSC0	LDA	PIA21
	ORA	PIA22
	COMA
	LDB	PIA21
	STB	PIA22
* LDB PIA2
	JMP	SWPCH	**************ATTR SWITCH SCAN PATCH********
	STB	PIA21
	LDB	PIA3
	STB	PIA31
	ANDA	PIA21
	BEQ	CSCAN
	LDU	#SWTAB-4
SWITCH	CLRB
SW0	ADDB	#4
	LSRA
	BCC	SW0
	PSHS	D,U	SAVE BASE, SHIFTERS
	LEAU	B,U
	PULU	D,X
	LDU	SWPROC
	JMP	SWWPC9
	ORG	$7AD
*
*SCAN COIN SWITCHES
*
CSCAN	LDA	PIA01
	ORA	PIA02
	COMA
	LDB	PIA01
	STB	PIA02
	LDB	PIA0
	ANDB	#$3F
	STB	PIA01
	BITA	PIA01
	BEQ	CSCX	NO HIT
	LDX	#120
CSC1	LEAX	-1,X	1 MSEC DELAY
	BNE	CSC1
	LDB	PIA0	DOUBLE CHECK
	ANDB	PIA01
	STB	PIA01
	ANDA	PIA01
	BEQ	CSCX	NOBODY THERE
	LDU	#SWTAB1-4 HANDLE IT
	BSR	SWITCH
CSCX	RTS
*
*GET PLAYER STATE INDEX
*
PLINDX	PSHS	A
	LDA	CURPLR
PLND1	LDX	#PLDATA
	DECA
	BEQ	PLINX
	LDX	#.P2SCR
PLINX	PULS	A,PC
PLDX	PSHS	A
	BRA	PLND1
*
*RANDOM NUMBER GENERATOR
*
RAND	PSHS	B
	LDB	SEED
	LDA	#3
	MUL
	ADDB	#17
	LDA	LSEED
	LSRA
	LSRA
	LSRA
	EORA	LSEED
	LSRA
	ROR	HSEED
	ROR	LSEED
	ADDB	LSEED
	ADCB	HSEED
	STB	SEED
	LDA	SEED
	PULS	B,PC
*
*INITIALIZE PROCESS DATA STRUCTURE
*
PINIT	PSHS	X,D
	CLRD
	LDX	#PTAB
	STX	FREE
PINIT1	LEAX	PSIZE,X
	STX	-PSIZE,X
	CMPX	#TABEND-PSIZE
	BNE	PINIT1
	STD	,X
	STD	ACTIVE
*SUPER PROCESSES
	LDX	#SPTAB
	STX	SPFREE
PINIT2	LEAX	SPSIZE,X
	STX	-SPSIZE,X
	CMPX	#SPTEND-SPSIZE
	BNE	PINIT2
	STD	,X
	LDX	#ACTIVE
	STX	CRPROC
	PULS	X,D,PC
*INITIALIZE COLOR RAM
CRINIT	LDX	#CRTAB
	LDU	#PCRAM
	LDB	#16
INITC	LDA	,X+
	STA	,U+
	DECB
	BNE	INITC
	RTS
*
*INITIALIZE OBJECT LIST
*
OINIT	PSHS	CC,X,D
	ORCC	#$FF	OFF INTERRUPTS
	LDX	#OLIST
	STX	OFREE
OINIT1	LEAX	OSIZE,X
	STX	-OSIZE,X
	CMPX	#OLEND-OSIZE
	BNE	OINIT1
	CLRD
	STD	,X	LAST LINK 0
	STD	IPTR	INACTIVE LIST
	STD	OPTR
	STD	SPTR
	PULS	CC,X,D,PC
*
* MONOCHROMATIZER ROUTINE Y = OBJECT PICTURE ADDRESS
* U = MONOCHROMATIC PICTURE ADDRESS
* COLOR: $F
*
MONO	PSHS	U,X,D	SAVE REGISTERS
	LDD	OBJW,Y	GET PICTURE SIZE
	STD	OBJW,U	COPY TO MONO DESCRIPTOR
	MUL		COMPUTE NUMBER OF BYTES
	LEAX	OBJL,U	GET START OF MONO DATA ADDRESS
	STX	OBJP0,U SAVE IN MONO DESCRIPTOR
	LEAX	D,X	ADD NUMBER OF BYTES OF ONE IMAGE
	STX	OBJP1,U	SAVE IN MONO DESCRIPTOR
	PSHS	X	END OF FIRST MONO FLAVOR
	LEAX	D,X	ADD NUMBER OF BYTES OF ONE IMAGE
	PSHS	X	SAVE END OF SECOND MONO FLAVOR
	LDD	OBJWRT,Y GET OBJECT WRITE ROUTINE
	STD	OBJWRT,U COPY TO MONO DESCRIPTOR
	LDD	OBJDEL,Y GET OBJECT ERASE ROUTINE
	STD	OBJDEL,U COPY TO MONO DESCRIPTOR
	LDX	OBJP0,Y	GET START OF FIRST FLAVOR OBJECT DATA
	LEAU	OBJL,U	GET START OF FIRST FLAVOR MONO
	BSR	MONO1	MONOCHROMATIZE FIRST FLAVOR
	LDX	OBJP1,Y	GET START OF SECOND FLAVOR OBJECT DATA
	LDU	2,S	GET START OF SECOND FLAVOR MONO
	LDD	,S	GET END OF SECOND FLAVOR MONO
	STD	2,S	SET BOUNDARY
	BSR	MONO1	MONOCHROMATIZE SECOND FLAVOR
	LEAS	4,S	CLEAN THE STACK
	PULS	D,X,U,PC RESTORE REGISTERS, RETURN
* MONOCHROMATIZE LOOP
MONO1	LDD	,X++	GET TWO BYTES OF OBJECT, ADVANCE POINTER
	BITA	#$F0	TEST FIRST NIBBLE
	BEQ	MONO2	ZERO?, SKIP IT
	ORA	#$F0	COLORED?, SET TO $F
MONO2	BITA	#$0F	TEST SECOND NIBBLE
	BEQ	MONO3	ZERO?, SKIP IT
	ORA	#$0F	COLORED?, SET TO $F
MONO3	BITB	#$F0	TEST THIRD NIBBLE
	BEQ	MONO4	ZERO?, SKIP IT
	ORB	#$F0	COLORED?, SET TO $F
MONO4	BITB	#$0F	TEST FOURTH NIBBLE
	BEQ	MONO5	ZERO?, SKIP IT
	ORB	#$0F	COLORED?, SET TO $F
MONO5	ANDA	#$BB	CHANGE COLOR TO $B
	ANDB	#$BB
	STD	,U++	SAVE TWO BYTES MONO, ADVANCE POINTER
	CMPU	4,S	CHECK FOR END OF OBJECT
	BLO	MONO1	NO?, CONTINUE
	RTS	YES?,	RETURN
*
*RANDOM MAX ROUTINE
*A = RAND <=A
RMAX	PSHS	A
	JSR	RAND
RMAX1	CMPA	,S
	BLS	RMAXX
	LSRA
	BRA	RMAX1
RMAXX	INCA
	LEAS	1,S
	RTS
*
*BCD-HEX CONVERT
*A=BCD-HEX
BCDHEX	PSHS	B
	CLRB
BCH1	CMPA	#$10
	BLO	BCH2
	ADDB	#10
	SUBA	#$10
	BRA	BCH1
BCH2	PSHS	B
	ADDA	,S+
	PULS	B,PC
*
*HEX-BCD CONVERT
*A=HEX-BCD
HEXBCD	PSHS	B
	TFR	A,B
	CLRA
HBC1	CMPB	#10
	BLO	HBC2
	ADDA	#$10
	DAA
	SUBB	#10
	BRA	HBC1
HBC2	PSHS	B
	ADDA	,S+
	DAA
	PULS	B,PC
*
*STAR INITIALIZE
*
STINIT	LDX	#SMAP
	LDB	#16
	STB	STRCNT
	CLRB
STI0	JSR	RAND
	CMPA	#$9C
	BHS	STI0	NO GOOD
	STA	SX,X	GET X
STI1	JSR	RAND
	CMPA	#$A0	LIMIT TEST
	BHI	STI1
	CMPA	#YMIN
	BLS	STI1
	STA	SY,X
	STB	SCOL,X	COLOR
	ADDB	#$11
	ANDB	#$77
	LEAX	SLGTH,X
	CMPX	#SMEND
	BNE	STI0
STX	RTS
*
*OUTPUT STARS
*
STOUT	LDA	STATUS
	BITA	#$20
	BNE	STX	NO
	LDX	#SMAP
	LDD	BGL
	ANDB	#$80
	STD	ITEMP
	LDD	BGLX
	ANDB	#$80
	SUBD	ITEMP
	ASLB		GET DELTA
	ROLA
*
*STAR OUTPUT
*ITEMP2=PHASE MASK
*X =ADDR OF STAR TABLE START
*B=COUNT
*ITEMP = MOVEMENT
	STA	ITEMP
	LDB	#$F0
	LDA	BGL+1
	BITA	#$40	GET PHASES
	BNE	STOUT0
	COMB
STOUT0	STB	ITEMP2
	CLRA
	STA	[0,X]
	STA	[4,X]
	STA	[8,X]
	STA	[12,X]
	STA	[16,X]
	STA	[20,X]
	STA	[24,X]
	STA	[28,X]
	STA	[32,X]
	STA	[36,X]
	STA	[40,X]
	STA	[44,X]
	STA	[48,X]
	STA	[52,X]
	STA	[56,X]
	STA	[60,X]
	LDB	STRCNT
STOUT1	LDA	SX,X
	ADDA	ITEMP
	CMPA	#$9C
	BLO	STOUT3	NO OVERFLOW
	CMPA	#$C0	WHICH WAY DID HE COME
	BLS	STOUT2
	LDA	#$9B
	BRA	STOUT3
STOUT2	LDA	#0
STOUT3	STA	SX,X
	LDA	SCOL,X
	ANDA	ITEMP2	*****************************
	FCB	$A7,$98,$0 !!!BSO BONER!!!=STA [SX,X]
	LEAX	SLGTH,X	*****************************
	DECB
	BNE	STOUT1
*
*STAR BLINK
*
SBLNK	LDB	SEED	GET A RANDOM GUY
	ANDB	#$3C
	LDX	#SMAP
	ABX
	LDA	SCOL,X	CHANGE COLOR
	ADDA	#$11
	ANDA	#$77
	STA	SCOL,X
	LDA	SEED
	BITA	#$01	HYPER?
	BNE	SBLNK1	NO
	CMPA	#$98
	BLO	SBLNK0
SBL00	SUBA	#$84	************************************
SBLNK0	FCB	$6F,$98,$00 !!!BSO BONER!!!=CLR [SX,X] HYPER
	STA	SX,X	************************************
	LDA	STATUS
	BITA	#2
	BEQ	SBLNK1	TERRAIN ACTIVE, QUIT
	LDA	LSEED	Y	HYPER
	ANDA	#$3F
	LDB	#3
	MUL
	ADDB	#YMIN
	STB	SY,X
SBLNK1	EQU	*
*
*VOLCANO ROUTINE
*
VOLC	LDA	#$87
	SUBA	BGL
	CMPA	#$26
	BLS	VOLC1
VOLCX1	LDA	VFLG	ERASE LAST GUYS?
	BEQ	VOLCX	NO
	CLRA
	CLRB
	STA	VFLG
	LDX	#LAVTAB
	STD	[LAVX,X]
	STD	[LAVX+LAVL,X]
	STD	[LAVX+2*LAVL,X]
	STD	[LAVX+3*LAVL,X]
	STA	LAVTIM,X
	STA	LAVTIM+LAVL,X
	STA	LAVTIM+2*LAVL,X
	STA	LAVTIM+3*LAVL,X
	STA	VETIM
VOLCX	RTS
VOLC1	LDB	OVCNT
	CMPB	#2
	BHS	VOLCX1
	LDA	STATUS
	BITA	#$2
	BNE	VOLCX1	TERRAIN INACTIVE
	LDD	#$87AA
	STA	VFLG
	SUBD	BGL
	ASLB
	ROLA
	ASLB
	ROLA
	STD	ITEMP	X OFFSET
	LDD	#0
	LDX	#LAVTAB
	STD	[LAVX,X] OFF OLDIES
	STD	[LAVX+LAVL,X]
	STD	[LAVX+2*LAVL,X]
	STD	[LAVX+3*LAVL,X]
VOLCLP	LDA	LAVTIM,X
	BEQ	VOLCLX
	DEC	LAVTIM,X
	BEQ	VOLCLX
	LDD	LAVXV,X
	ADDD	LAVX16,X
	STD	LAVX16,X
	ADDD	ITEMP
	CMPA	#$9A	ON SCREEN??
	BLO	VOLC10
VOLC11	JMP	VOLPAC
	NOP
VOLC10	STA	LAVX,X
	LDD	LAVYV,X
	ADDD	#$0010	Y ACCEL
	STD	LAVYV,X
	ADDD	LAVY16,X Y VELOCITY
	STD	LAVY16,X
	ADDA	#$10
	CMPA	#YMIN+$10
	BLS	VOLC11
	LDD	#$4444	GET COLOR
	STD	[LAVX,X]
VOLCLX	LEAX	LAVL,X
	CMPX	#LAVTND
	BNE	VOLCLP
*CHECK FOR A NEW ERUPTION
	DEC	VETIM
	BPL	VOLC4	NO
*START ERUPTION
	LDD	SEED
	ANDB	#$3F	NEXT ERUPTION SCHED
	STB	VETIM
	ANDA	#3	# OF ROCKS
	INCA
	STA	ITEMP
VOLC2	LDX	#LAVTAB
VOLC2L	LDA	LAVTIM,X	ACTIVE??
	BNE	VOLC3	YES
	CLR	LAVX16,X
	LDB	SEED
	SEX
	STD	LAVXV,X
	LDA	#3
	JSR	RMAX
	NEGA
	LDB	LSEED
	STD	LAVYV,X
	ANDB	#$3F
	ADDB	#$38
	STB	LAVTIM,X
	LDA	#$9C	VOLCANO	Y
	STA	LAVY16,X
VOLC3	LEAX	LAVL,X
	CMPX	#LAVTND
	BEQ	VOLC4
	DEC	ITEMP
	BNE	VOLC2L
VOLC4	RTS
*
*INIT THRUST TABLE
*
THINIT	LDX	#THTAB
	STX	THX
THI1	JSR	RAND
	STA	32,X
	STA	,X+
	CMPX	#THTEND-32
	BNE	THI1
	RTS
*
*OUTPUT THRUST
*
THOUT	LDX	THX
	LDU	PLAXC
	LEAU	-$100+1,U
	LDD	,X
	STD	,U
	LDA	5,X
	LDB	9,X
	STD	2,U
	LDA	12,X
	STA	4,U
	LDA	PIA21
	BITA	#$02
	BEQ	THOUTX	IDLE
	LDA	3,X
	LDB	6,X
	STD	-$100+1,U
	LDA	10,X
	STA	-$100+3,U
	LDA	4,X
	LDB	7,X
	STD	-$200+1,U
	LDA	11,X
	STA	-$200+3,U
	LDA	8,X
	STA	-$300+2,U
THOUTX	RTS
*
*BACKWARDS THRUST
*
THOUT1	LDU	THX
	LDX	PLAXC
	LEAX	$801,X
	PULU	D,Y
	STD	,X
	STY	2,X
	PULU	D,Y
	STA	4,X
	LDA	PIA21
	BITA	#$02
	BEQ	THT1X	NO THRUST
	STB	$101,X
	STY	$102,X
	PULU	D,Y
	STY	$201,X
	STA	$203,X
	STB	$302,X
THT1X	RTS
*
*OFF BACKWARDS THRUST
*
THOFF1	LDU	PLAXC
	CLRB
	LDX	#0
	LEAY	,X
	LEAU	$806,U
	PSHU	B,X,Y
	STX	$101,U
	STB	$103,U
	STX	$201,U
	STB	$203,U
	STB	$302,U
	RTS
*
*OFF OLD THRUST
*
THOFF	LDU	PLAXC
	CLRB
	LDX	#0
	LEAY	,X
	LEAU	-$100+6,U
	PSHU	X,Y,B
	STX	-$100+1,U
	STB	-$100+3,U
	STX	-$200+1,U
	STB	-$200+3,U
	STB	-$300+2,U
	RTS
*
*PLAYER DISPLAY
*
PRDISP	STA	TEMP48	SAVE A
	LDA	STATUS	SEE IF PLAYER DISABLED
	BITA	#$10
	BEQ	PRDX1	NOPE....PUT HIM OUT (DOES HE??)
	LDD	NPLAD	LET HIM REVERSE IF INVISIBLE
	STD	PLADIR
	LDD	NPLAXC	REFRESH COORD
	STD	PLAXC
PRDX	RTS
PRDX1	LDA	TEMP48
	CMPA	PLAYC
	BLS	PRDX
	CMPB	PLAYC
	BHI	PRDX
	LDA	PLADIR
	BMI	PRDSP1
	BSR	POFF
	BSR	THOFF
	BRA	PRDSP2
PRDSP1	BSR	POFF
	BSR	THOFF1
PRDSP2	LDD	NPLAD
	STD	PLADIR
	BMI	PRDSP3
	BSR	POUT
	JMP	THOUT
PRDSP3	BSR	POUT1
	JMP	THOUT1
*
*PLAYER ON
*
POUT	LDY	#PLAPIC
POUT2	LDA	PLAX16+1
	ASLA
	LDD	NPLAXC
	STD	PLAXC
	JMP	ON86
POUT1	LDY	#PLBPIC
	BRA	POUT2
*
*PLAYER OFF
*
POFF	LDD	PLAXC
	JMP	OFF86
*
*PLAYER PROCESS
*CALLED FORM IRQ
*
PLAYER	LDA	STATUS	CONTROLS INACTIVE?
	BITA	#$40
	LBNE	PLAYX	YES
*X DAMPING
	CLR	ITEMP
	LDD	PLAXV
	COMA
	COMB
	ADDD	#1	NEGD
	BPL	PL00
	COM	ITEMP	SIGN EXTEND
PL00	ASLB	SHIFT
	ROLA
	ASLB
	ROLA
	ADDD	PLAXV+1
	STD	PLAXV+1
	LDA	ITEMP
	ADCA	PLAXV
	STA	PLAXV
	LDD	PLAXV
	LDA	PIA21	ACCEL?
	BITA	#$02
	BEQ	PLAY1	NO
	CLR	ITEMP
	LDD	PLADIR
	BPL	PL02
	COM	ITEMP
PL02	ADDD	PLAXV+1
	STD	PLAXV+1
	LDA	ITEMP
	ADCA	PLAXV
	STA	PLAXV
*VELOCITY MAPPING X MOTION
PLAY1	LDD	PLAXV	GET 5 BIT VELOCITY
	ASRA
	RORB
	ASRA
	RORB
	CLRA
	ASRB
	RORA
	STA	PCX+1
	STB	PCX
	LDA	PLADIR	+DIR?
	BMI	PV1	NO
	LDA	#$20	+BASE
	TSTB	+VEL?
	BMI	PV1A	NO
	BRA	PV2
PV1	LDA	#$70	-BASE
	TSTB	-VEL?
	BMI	PV2	YES
PV1A	CLR	PCX+1
	CLR	PCX
PV2	LDB	PCX+1
	ADDA	PCX	CALCULATED POSITION
	STA	PCX
PV2A	SUBD	PLAX16	ACTUAL POS
	BEQ	PV9	NO DIFF
	BLO	PV3
	CMPD	#$100	IN RANGE?
	BLS	PV9
	LDD	#$40
	STD	BGDELT
	LDD	#$100
	ADDD	PLAX16
	BRA	PV10
PV3	CMPD	#-$100
	BGT	PV9	YES IN RANGE
	LDD	#-$40	NO
	STD	BGDELT
	LDD	#-$100
	ADDD	PLAX16	ADJUST SLIDE
	BRA	PV10
PV9	CLRD
	STD	BGDELT	NO ADJUST NEEDED
	LDD	PCX	WERE OK
PV10	STD	PLAX16
	STA	NPLAXC
	LDD	BGL
	STD	BGLX
	LDD	PLAXV
	CMPD	#$0100	MAX VEL
	BLT	PV11
	LDD	#$0100
PV11	CMPD	#-$0100
	BGT	PV12
	LDD	#-$0100
PV12	STD	PLAXV
	ADDD	BGL
	SUBD	BGDELT
	STD	BGL
*PLAYER ABSOLUTE X COORD
	LDD	PLAX16
	LSRA
	RORB
	LSRA
	RORB
	ANDB	#$E0
	ADDD	BGL
	STD	PLABX
*VERTICAL MOTION
	LDB	PLAY16	GET ADDR FOR LIMIT CHK
	LDA	PIA31	UP?
	LSRA
	BCS	PLAUP	YES
	LDA	PIA21
	BMI	PLADN	DOWN
	LDD	#0
	BRA	PYV1
PLAUP	CMPB	#YMIN+1
	BLS	PLAYX
	LDD	PLAYV
	BPL	PLAUP1
	ADDD	#-8
	CMPD	#-$200
	BGE	PYV1
	LDD	#-$200
	BRA	PYV1
PLAUP1	LDD	#-$100
	BRA	PYV1
PLADN	CMPB	#238
	BHS	PLAYX
	LDD	PLAYV
	BLE	PLADN1
	ADDD	#8
	CMPD	#$200
	BLS	PYV1
	LDD	#$200
	BRA	PYV1
PLADN1	LDD	#$100
	BRA	PYV1
PYV1	STD	PLAYV
	ADDD	PLAY16
	STD	PLAY16
	STA	NPLAYC
PLAYX	RTS
*
*VELOCITY ADDITION
*
VELO	LDA	STATUS
	BITA	#$20
	BNE	VELOX	DISABLED
	LDX	#OPTR
	BRA	VELLP
VELOLP	LDD	OX16,X	UPDATE X
	ADDD	OXV,X
VELO2	STD	OX16,X
	LDD	OY16,X
	ADDD	OYV,X
	CMPA	#YMIN
	BHS	VELO3
	LDA	#YMAX
VELO3	CMPA	#YMAX
	BLS	VELO4
	LDA	#YMIN
VELO4	STD	OY16,X
VELLP	LDX	,X
	BNE	VELOLP
VELOX	RTS
*
*OBJECT PROCESSING
*
OPROC	STD	ITEMP2	SAVE LIMITS
	LDA	STATUS
	BITA	#$20
	BNE	OPRX	NO
	LDX	#OPTR
	BRA	OPLP
*ERASE OLD OBJECT
OPLP0	LDD	OBJX,X
	BEQ	OPON	ALREADY ERASED
	CMPB	ITEMP2	TOO HIGH Y?
	BHI	OPLP	YES
	CMPB	ITEMP2+1 Y TOO LOW?
	BLS	OPLP	YES
	LDY	OPICT,X
	JSR	[OBJDEL,Y]
	LDD	#0
	STD	OBJX,X	OFF OBJECT
*ON NEW OBJECT
OPON	LDB	OY16,X	CAN WE WRITE
	CMPB	ITEMP2	UPPER BOUND
	BHI	OPLP
	CMPB	ITEMP2+1
	BLS	OPLP	NO
*CHECK ON SCREEN
	LDD	OX16,X
	SUBD	BGL
	CMPD	#150*64
	BHS	OPLP	OFF SCREEN
	LDY	OPICT,X	GET PICT
	ASLB
	ROLA
	ASLB
	ROLA
	ADDA	OBJW,Y	OVER WIDTH PROTECTION
	CMPA	#$9C
	BHI	OPLP
	SUBA	OBJW,Y
	ASLB		SAVE PHASE
	LDB	OY16,X
	STD	OBJX,X	STORE NEW COORDES
	JSR	[OBJWRT,Y]
OPLP	LDX	OLINK,X
	BNE	OPLP0	CHECK THE REST
OPRX	RTS

*
*GET A SHELL
*X=OBJECT FIRING, RETURNED PTR TO SHELL
*U= OBJID
*RET=OUPUT ROUTINE
*RET+2=COLLISION PICT
*RET+4= KILL ROUTINE
*RET+6= RET
*
GETSHL	PSHS	D,Y,U
	LDA	BMBCNT	SHOT LIMIT
	CMPA	#20
	BHS	STSHX
	LDD	OX16,X
	SUBD	BGL
	CMPD	#150*64
	BHS	STSHX	OFF SCREEN CHECK
	ASLB
	ROLA
	ASLB
	ROLA
	LDB	OY16,X
	CMPB	#YMIN
	BLS	STSHX
	LDX	OFREE
	BEQ	STSHX
	STD	OBJX,X
	STD	OX16,X
	EXG	A,B
	STD	OY16,X
	STU	OBJID,X
	CLRD
	STD	OXV,X
	STD	OYV,X
	LDU	6,S
	PULU	D,Y
	STD	OBJCOL,X
	STY	OPICT,X
	PULU	D
	STU	6,S	NEW RET ADDR
	STD	OCVECT,X
	LDA	#20	DEFAULT LIFETIME
	STA	ODATA,X
	STA	ODATA+1,X ALIVE
	LDD	OLINK,X
	STD	OFREE
	LDD	SPTR
	STD	OLINK,X
	INC	BMBCNT	KICK COUNTER
	STX	SPTR	LINK HIM IN
	PULS	D,Y,U,PC
STSHX	LDU	6,S	GET RETURN ADDR
	LEAU	6,U
	STU	6,S
	CLRA
	PULS	D,Y,U,PC
*
*SCAN SHELL LIST FOR INACTIVES
*
SHSCAN	LDX	#SPTR
	BRA	SHSCLP
SHSC1	LDA	ODATA+1,X
	BEQ	SHSCK
	DEC	ODATA,X
	BNE	SHSCLP
SHSCK	LDU	OLINK,X
	STU	,Y
	LDU	OFREE
	STU	OLINK,X
	STX	OFREE
	JSR	OFSHIT
	DEC	BMBCNT
	LEAX	,Y
SHSCLP	LEAY	,X
	LDX	,X
	BNE	SHSC1
	RTS
*
*FIRE LASER
*
LFIRE	JSR	LASPAT	************************************PATCH
	NOP
	NOP
	NOP		****************************************
	INC	LFLG
	LDD	#LASSND
	JSR	SNDLD
	LDX	NPLAXC
	LDA	NPLAD
	BPL	LASR
	JMP	LASL
LFIREX	JMP	SUCIDE
*
*RIGHT LASER
*
LASR	LEAX	$704,X
	STX	PD,U
	STX	PD+2,U
	STX	PD+4,U
LASR0	LDA	STATUS
	BITA	#$40
	BNE	LRDIE
	LDX	PD,U
	LDD	#$9911
	CMPX	#$9800
	BHS	LRDIE
	STB	,X
	STB	$100,X
	STB	$200,X
	STB	$300,X
	LEAX	$400,X
	STA	,X
	STX	PD,U
	LDY	FISX
	CMPY	#FISEND-3
	BLO	LASR2
	LDY	#FISTAB
LASR2	LDX	PD+2,U
	LDD	,Y++
	STA	,X
	STB	$100,X
	LDB	,Y+
	STB	$200,X
	LEAX	$300,X
	STY	FISX
	STX	PD+2,U
	CLR	[PD+4,U]
	INC	PD+4,U
	LDD	PD,U
	SUBA	#$06
	PSHS	U
	LDU	#LASP1
	JSR	COLIDE
	PULS	U
	BNE	LRDIE
	NAP	1,LASR0
LRDIE	LDX	PD+4,U
	CLRA
LRDLP	STA	,X
	LEAX	$100,X
	CMPX	PD,U
	BLS	LRDLP
	BRA	LASD
*
*LEFT LASER
*
LASL	LEAX	4,X
	STX	PD,U
	STX	PD+2,U
	STX	PD+4,U
LASL0	LDA	STATUS
	BITA	#$40
	BNE	LLDIE
	LDX	PD,U
	LDD	#$9911
	CMPX	#$0500
	BLS	LLDIE
	STB	,X
	STB	-$100,X
	STB	-$200,X
	STB	-$300,X
	LEAX	-$400,X
	STA	,X
	STX	PD,U
	LDY	FISX
	CMPY	#FISEND-3
	BLO	LASL2
	LDY	#FISTAB
LASL2	LDX	PD+2,U
	LDD	,Y+
	STA	,X
	STB	-$100,X
	LDB	,Y+
	STB	-$200,X
	LEAX	-$300,X
	STY	FISX
	STX	PD+2,U
	CLR	[PD+4,U]
	DEC	PD+4,U
	LDD	PD,U
	PSHS	U
	LDU	#LASP1
	JSR	COLIDE
	PULS	U
	BNE	LLDIE
	NAP	1,LASL0
LLDIE	LDX	PD+4,U
	CLRA
LLDLP	STA	,X
	LEAX	-$100,X
	CMPX	PD,U
	BHS	LLDLP
LASD	DEC	LFLG
	JMP	SUCIDE
*
*
FISS	LDX	#FISTAB
	STX	FISX
FISS0	JSR	RAND
	CLRB
	LSRA
	BCC	F1
	ADDB	#$01
F1	LSRA
	BCC	F2
	ADDB	#$10
F2	STB	,X+
	CMPX	#FISEND
	BNE	FISS0
	RTS
*
*COLLISION DETECT
*U=PICTURE DESC, D=UL COORD X,Y
*X=OBJECT DESC
COLIDE	LDX	#OPTR
COL0	STD	ULX	CALC LOWER RT
	ADDD	OBJW,U
	STD	LRX	LR CORNER OF PLAYER
	BRA	COLLP
COL1	LDD	OBJX,X
	BEQ	COLLP	OFF SCREEN
	CMPA	LRX
	BHS	COLLP
	CMPB	LRY
	BHS	COLLP
	ADDD	[OPICT,X] CALC LR
	CMPA	ULX
	BLS	COLLP
	CMPB	ULY
	BHI	IC1	CHECK INTERSECTION
COLLP	LDX	OLINK,X
	BNE	COL1
	RTS		RET EQ
*
*COMPARE FOR PICTURE INTERSECTION
*FIND UPPERMOST
IC1	STU	CTEMP2	SAVE PLAYER DESC
	LDY	OPICT,X
	SUBD	,Y	SAVE OBJX FROM IRQ
	STD	XTEMP
	CLRD		CLEAR OFFSETS
	STD	OX1	GET OBJECT
	STD	PX1	PLAYER
	LDD	XTEMP
	SUBB	ULY	FIND UPERMOST
	BHI	IC10	PLAYER UPPERMOST
	NEGB
	STB	OY1	OBJECT UPPERMOST
	BRA	IC2
IC10	STB	PY1
*FIND LEFTMOST
IC2	SUBA	ULX
	BHI	IC20	PLAYER LEFTMOST
	NEGA
	STA	OX1	OBJECT LEFTMOST
	BRA	IC3
IC20	STA	PX1
*FIND LOWERMOST
*CALC OY2
IC3	LDD	XTEMP	GET OBJX
	ADDD	OBJW,Y
	SUBB	LRY
	BHI	IC4	OBJECT LOWEST
	CLRB		PLAYER LOWEST
*FIND RIGHTMOST
*CALC OX2
IC4	SUBA	LRX
	BHI	IC40	OBJECT RIGHTMOST
	CLRA		PLAYER RIGHTMOST
*CALC X,Y COUNT
IC40	STD	CTEMP	SAVE
	LDD	OBJW,Y	GET WIDTH,HEIGHT
	SUBD	OX1	OX1,OY1
	SUBD	CTEMP	OX2,OY2
	STD	XCNT	XCNT,YCNT
*INIT SCAN PARAMETERS
*Y=OBJECT ADDR
*U=PLAYER ADDR
	LDA	OBJH,U
	STA	PLHT
	LDB	PX1
	MUL
	LDU	OBJP0,U
	LEAU	D,U	INIT PLAYER INDEXSH
	LDA	OBJH,Y
	STA	OBHT
	LDY	OBJP0,Y	GET PICT DATA
	LDB	OX1
	MUL
	LEAY	D,Y	INIT OBJECT INDEX
	LDA	OY1
	LEAY	A,Y
	LDA	PY1
	LEAU	A,U
IC5	LDB	YCNT
	DECB
IC50	LDA	B,U
	BEQ	IC6
	LDA	B,Y	CHECK
	BEQ	IC6
*FIND CENTER OF EXPLOSION ON SCREEN
	LEAY	B,Y
	TFR	Y,D
	LDU	OPICT,X	GET ROM PTR
	SUBD	OBJP0,U	FIND DATA OFFSET
	LDY	OBJX,X	SCREEN TOP LEFT
*CALC COLUMN OFFSET
FC1	SUBB	OBJH,U
	SBCA	#0
	BCS	FC2
	LEAY	$100,Y
	BRA	FC1
FC2	ADDB	OBJH,U	CORRECT OVER SUBTRACT
	ADCA	#0
	LEAY	B,Y	VERT OFFSET
	STY	CENTMP	SCREEN COLLISION ADDR
	JSR	[OCVECT,X]
	LDA	#1
	RTS	HIT
IC6	DECB
	BPL	IC50	NOT FINISHED COLUMN
	LDD	OBHT	GET OBHT,PLHT
	LEAY	A,Y
	LEAU	B,U
	DEC	XCNT
	BNE	IC5
	LDU	CTEMP2
	JMP	COLLP
*
*COLOR THE LASER
*
COLR	CLR	LCOLRX
COLRLP	LDX	#COLTAB
	LDA	LCOLRX
COLR0	LDB	A,X
	BEQ	COLR
COLR1	INC	LCOLRX
	STB	PCRAM+1
	LDA	#2
	LDX	#COLRLP
	JMP	SLEEP
*
*COLOR TABLE
*
COLTAB	FCB	$38,$39,$3A,$3B,$3C
	FCB	$3D,$3E,$3F,$37,$2F,$27,$1F,$17
	FCB	$47,$47,$87,$87,$C7,$C7
	FCB	$C6,$C5,$CC,$CB,$CA,$DA,$E8,$F8
	FCB	$F9,$FA,$FB,$FD,$FF,$BF,$3F,$3E
	FCB	$3C,0
*
*THRUST PROCESS
*
THPROC	LDX	THX
	LEAX	1,X
	CMPX	#THTAB+32
	BLS	THPR1
	LDX	#THTAB
THPR1	STX	THX
	NAP	4,THPROC
